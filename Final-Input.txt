STRING_LITERAL
"Group 2"
"Borja, Czarina Khiara"
"Funtar, Paul Anthony"
"Munsayac, Malacai Angelo"
"Pabroquez, Jethro"
"Velasco, Marlon"
"Villanueva, John Matthew"
"Villas, Richter Ace"
"BSCS 3-1"
"Principles of Programming Language"

NUMBER_LITERAL
10
20
30
40
50

IDENTIFIER
a
b
c
myName
my_Lexical
myProgram


KEYWORD
when
otherwise
unless
during
next
enough
lin
lout


RESERVE_WORD
on
off
none


ADDITION_OPERATOR
+

SUBTRACTION_OPERATOR
-

MULTIPLICATION_OPERATOR
*

DIVISION_OPERATOR
/

EXPONENTIATION_OPERATOR 
^*

MODULO_OPERATOR
%

FLOOR_DIVISION_OPERATOR
//

ASSIGNMENT_OPERATOR
=

ADDITION_ASSIGNMENT_OPERATOR
+=

SUBTRACTION_ASSIGNMENT_OPERATOR
-=

MULTIPLICATION_ASSIGNMENT_OPERATOR
*=

DIVISION_ASSIGNMENT_OPERATOR
/=

EXPONENTIATION_ASSIGNMENT_OPERATOR
^*=

MODULUS_ASSIGNMENT_OPERATOR
%=

FLOOR_DIVISION_ASSIGNMENT_OPERATOR
//=

IS_EQUAL_OPERATOR
==

NOT_EQUAL_OPERATOR
~=

GREATER_THAN_OPERATOR
>

LESS_THAN_OPERATOR
<

GREATER_EQUAL_OPERATOR
>=

LESS_EQUAL_OPERATOR
<=

AND_OPERATOR
&

OR_OPERATOR


NOT_OPERATOR
~

CONSTANT_NUMBER
num

CONSTANT_DECIMAL
dec

CONSTANT_TEXT
txt

CONSTANT_COLLECTION
col

CONSTANT_SWITCH
swh

NOISE_WORD
delete
es
passes
ber
number 
imal
decimal
e
text
lect
collect
itc
switch
           

COMMENT
/*comment*/

SEMICOLON
;

COLON
:

OPEN_PARENTHESIS
(

CLOSED_PARENTHESIS
)

OPEN_CURLY
{

CLOSED_CURLY
}

QUOTATION_MARKS
"
"

COMMAS
,

OPEN_BRACKET
[

CLOSED_BRACKET
]

INVALID
_number
_a
invalid_